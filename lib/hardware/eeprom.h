/*
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <https://www.gnu.org/licenses/>.
 */

#pragma once

#include <stdbool.h>
#include <stdint.h>

#include "config.h"

//--------------------------------------------------------------------+
// EEPROM Configuration
//--------------------------------------------------------------------+

#if defined(EEPROM_I2C)
#if defined(EEPROM_24LC512)
#define EEPROM_BYTES 65536
#define EEPROM_PAGE_SIZE 128
#define EEPROM_ADDR_SIZE 2
#define EEPROM_WRITE_TIME 5
#elif defined(EEPROM_24LC256)
#define EEPROM_BYTES 32768
#define EEPROM_PAGE_SIZE 64
#define EEPROM_ADDR_SIZE 2
#define EEPROM_WRITE_TIME 5
#elif defined(EEPROM_24LC128)
#define EEPROM_BYTES 16384
#define EEPROM_PAGE_SIZE 64
#define EEPROM_ADDR_SIZE 2
#define EEPROM_WRITE_TIME 5
#elif defined(EEPROM_24LC64)
#define EEPROM_BYTES 8192
#define EEPROM_PAGE_SIZE 32
#define EEPROM_ADDR_SIZE 2
#define EEPROM_WRITE_TIME 5
#elif defined(EEPROM_24LC32)
#define EEPROM_BYTES 4096
#define EEPROM_PAGE_SIZE 32
#define EEPROM_ADDR_SIZE 2
#define EEPROM_WRITE_TIME 5
#elif
#error "Unsupported EEPROM"
#endif

#if !defined(EEPROM_BASE_ADDR)
// I2C address of the EEPROM, shifted left by 1
// Default to 0b1010000 (0x50)
#define EEPROM_BASE_ADDR 0b10100000
#endif

#if !defined(EEPROM_ADDR)
// Macro for calculating the EEPROM address from the memory location. Maybe
// useful for smaller EEPROMs.
// Default to the base address of the EEPROM.
#define EEPROM_ADDR(addr) (EEPROM_BASE_ADDR)
#endif

#if !defined(EEPROM_I2C_HANDLE)
// STM32 HAL I2C handle for the EEPROM. This should be generated by CubeMX in
// the `main.c` file when I2C is enabled.
// Default to `hi2c1`
#define EEPROM_I2C_HANDLE hi2c1
#endif
#elif defined(EEPROM_WEAR_LEVELING)
#if !defined(EEPROM_BYTES)
// Size of the EEPROM in bytes. The MCU must have twice this amount available in
// flash and RAM.
// Default to 32KB
#define EEPROM_BYTES 32768
#endif

_Static_assert(EEPROM_BYTES <= 524288, "EEPROM size must be less than 512KB");
#elif
#error "EEPROM backend not defined"
#endif

//--------------------------------------------------------------------+
// EEPROM APIs
//--------------------------------------------------------------------+

/**
 * @brief Initialize the storage module
 *
 * @return none
 */
void eeprom_init(void);

/**
 * @brief Read data from the storage
 *
 * @param addr Memory address to read from
 * @param data Pointer to the buffer to store the data
 * @param len Number of bytes to read
 *
 * @return true if successful, false otherwise
 */
bool eeprom_read(uint32_t addr, uint8_t *data, uint32_t len);

/**
 * @brief Write data to the storage
 *
 * @param addr Memory address to write to
 * @param data Pointer to the data to write
 * @param len Number of bytes to write
 *
 * @return true if successful, false otherwise
 */
bool eeprom_write(uint32_t addr, uint8_t *data, uint32_t len);

/**
 * @brief Erase the storage
 *
 * @return true if successful, false otherwise
 */
bool eeprom_erase(void);
